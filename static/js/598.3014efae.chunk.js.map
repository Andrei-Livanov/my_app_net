{"version":3,"file":"static/js/598.3014efae.chunk.js","mappings":"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","sources":["webpack://my_app_net/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my_app_net/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my_app_net/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://my_app_net/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__9zEgp\",\"mainPhoto\":\"ProfileInfo_mainPhoto__knMp+\",\"avatar\":\"ProfileInfo_avatar__6ZVOo\",\"fullName\":\"ProfileInfo_fullName__-UfhI\",\"status\":\"ProfileInfo_status__Wpqev\",\"contact\":\"ProfileInfo_contact__tv66I\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\nimport styles from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={styles.status}>\r\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import {FC} from 'react'\r\nimport styles from './ProfileInfo.module.css'\r\nimport {createField, GetStringKeys, Input, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport {ProfileType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (\r\n    {handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {error && <div className={style.formSummaryError}>{error}</div>}\r\n            </div>\r\n            <div className={styles.fullName}>\r\n                <b>Full name</b>:\r\n                {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                {createField<ProfileTypeKeys>(\r\n                    '', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField<ProfileTypeKeys>(\r\n                    'My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key} className={styles.contact}>\r\n                        {/* todo: create some solution for embedded objects */}\r\n                        <b>{key}:{createField(key, 'contacts.' + key, [], Input)}</b>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n            <div className={styles.fullName}>\r\n                <button>Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>(\r\n    {form: 'edit-profile', destroyOnUnmount: false})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n","import {ChangeEvent, FC, useState} from 'react'\r\nimport styles from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport userPhoto from '../../../assets/images/avatar.png'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = (\r\n    {profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={styles.mainPhoto} alt='avatar'/>\r\n                {isOwner && <input type='file' onChange={onMainPhotoSelected} className={styles.avatar}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.fullName}>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {\r\n                profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n            {isOwner && <div className={styles.fullName}>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={styles.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__SM2a6\",\"posts\":\"MyPosts_posts__rvA+S\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__9MhxP\"};","import React, {FC} from 'react'\r\nimport styles from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img\r\n                src='https://avatars.mds.yandex.net/i?id=90baeefbf60fd8427e5b14ae9b5ed3c6-4936646-images-thumbs&n=13&exp=1'\r\n                alt=''/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, {FC} from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../../../common/FormsControls/FormsControls'\r\nimport {required} from '../../../../utils/validators/validators'\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (\r\n    props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>('Your post',\r\n                    'newPostText', [required], Input)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)\r\n","import React, {FC} from 'react'\r\nimport styles from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport AddPostForm, {AddPostFormValuesType} from './AddPostForm/AddPostForm'\r\nimport {PostType} from '../../../types/types'\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MapPropsType & DispatchPropsType> = props => {\r\n    const postsElements =\r\n        [...props.posts].reverse().map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={styles.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized\r\n","import {actions} from '../../../redux/profile-reducer'\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps,\r\n    {addPost: actions.addPostActionCreator}\r\n)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React, {FC} from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport {ProfileType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reducer'\r\nimport {compose} from 'redux'\r\nimport {withRouter} from '../../hoc/withRoute'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {AppStateType} from '../../redux/redux-store'\r\nimport {ProfileType} from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & any\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exist in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n","import React, {FC} from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from 'redux-form'\r\nimport {FieldValidatorType} from '../../../utils/validators/validators'\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = (\r\n    {meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | null,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: FC<WrappedFieldProps>,\r\n    props = {}, text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validators}\r\n                   component={component}\r\n                   {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import React, {FC} from 'react'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../redux/redux-store'\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP extends Object>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to='/login'/>\r\n        }\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__P3At6\",\"error\":\"FormsControls_error__ORnv4\",\"formSummaryError\":\"FormsControls_formSummaryError__2S3wj\"};"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","styles","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","destroyOnUnmount","handleSubmit","profile","error","onSubmit","style","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","onClick","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","alt","target","files","length","initialValues","formData","then","message","likesCount","required","MyPosts","postsElements","posts","reverse","p","id","values","addPost","newPostText","React","connect","state","profilePage","actions","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getUserStatus","console","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirect","FormControl","meta","touched","children","hasError","input","restProps","placeholder","name","validators","component","text","validate","mapStateToPropsForRedirect","WrappedComponent","to","maxLengthCreator","maxLength"],"sourceRoot":""}