{"version":3,"file":"static/js/944.00c35261.chunk.js","mappings":"qMAoCMA,GAAiBC,EAAAA,EAAAA,GAAkD,CAACC,KAAM,SAAzDD,EArBnB,SAD8F,GACtD,IAAtCE,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WACnB,OACI,kBAAMC,SAAUH,EAAa,WACxBI,EAAAA,EAAAA,IAAqC,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KACnEF,EAAAA,EAAAA,IACG,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cACrDH,EAAAA,EAAAA,IACG,KAAM,aAAc,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,eACtDL,IAAc,gBAAKM,IAAKN,EAAYO,IAAI,YACxCP,IAAcE,EAAAA,EAAAA,IACX,qBAAsB,UAAW,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAAC,IACzD,yBACKL,IAAS,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAwB,SAAEV,OAExD,0BACI,0CAIhB,IAmCJ,UArBkB,WACd,IAAMC,GAAaU,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKZ,UAAU,IACvEa,GAASH,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKC,MAAM,IAC/DC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIF,GACO,SAAC,KAAQ,CAACG,GAAI,cAIrB,4BACI,mCACA,SAACrB,EAAc,CAACM,SAXP,SAACgB,GACdH,GAASI,EAAAA,EAAAA,IAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,SACpF,EAS4CtB,WAAYA,MAG5D,C,6MCxDMuB,EAAwC,SAAH,GACC,IAAD,IAAtCC,KAAOC,EAAO,EAAPA,QAAS1B,EAAK,EAALA,MAAQ2B,EAAQ,EAARA,SACnBC,EAAWF,GAAW1B,EAC5B,OACI,iBAAKS,UAAWC,EAAAA,EAAAA,YAAqB,KAAOkB,EAAWlB,EAAAA,EAAAA,MAAe,IAAI,WACtE,yBAAMiB,IACLC,IAAY,0BAAO5B,MAGhC,EAEa6B,EAAkC,SAACC,GAC5C,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBL,MAAkB,OAAIK,EAAK,IACzC,OAAO,SAACN,GAAW,kBAAKM,GAAK,cAAE,uCAAcC,GAAWC,MAC5D,EAEa3B,EAA+B,SAACyB,GACzC,IAAOC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBL,MAAkB,OAAIK,EAAK,IACzC,OAAO,SAACN,GAAW,kBAAKM,GAAK,cAAE,oCAAWC,GAAWC,MACzD,EAEO,SAAS7B,EACZ8B,EACAC,EACAC,EACAC,GACwB,IAAxBN,EAAK,uDAAG,CAAC,EAAGO,EAAI,uDAAG,GACnB,OACI,4BACI,SAAC,KAAK,QAACJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPN,IACRO,IAGf,C,8EC9CO,IAAMjC,EAA+B,SAACmC,GACzC,IAAIA,EAGJ,MAAO,mBACX,EAEaC,EAAmB,SAACC,GAAiB,OAAyB,SAACF,GACxE,GAAIA,EAAMG,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAS,WAGzC,CAAC,C,qBCbD,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wC","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://my_app_net/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import {FC} from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\r\nimport {required} from '../../utils/validators/validators'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login} from '../../redux/auth-reducer'\r\nimport {Navigate} from 'react-router-dom'\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\r\n                    'Password', 'password', [required], Input, {type: 'password'})}\r\n                {createField<LoginFormValuesTypeKeys>(\r\n                    null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n                {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n                {captchaUrl && createField<LoginFormValuesTypeKeys>(\r\n                    'Symbols from image', 'captcha', [required], Input, {})}\r\n                <div>\r\n                    {error && <div className={styles.formSummaryError}>{error}</div>}\r\n                </div>\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst Login: FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, {FC} from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from 'redux-form'\r\nimport {FieldValidatorType} from '../../../utils/validators/validators'\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = (\r\n    {meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | null,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: FC<WrappedFieldProps>,\r\n    props = {}, text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validators}\r\n                   component={component}\r\n                   {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__P3At6\",\"error\":\"FormsControls_error__ORnv4\",\"formSummaryError\":\"FormsControls_formSummaryError__2S3wj\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","onSubmit","createField","required","Input","type","src","alt","className","styles","useSelector","state","auth","isAuth","dispatch","useDispatch","to","formData","login","email","password","rememberMe","captcha","FormControl","meta","touched","children","hasError","Textarea","props","input","restProps","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}