{"version":3,"file":"static/js/925.6e7afa36.chunk.js","mappings":"sKAoBMA,EAAW,WACb,IAAMC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,MAAM,IAE/DI,GAAWC,EAAAA,EAAAA,MAUjB,OARAC,EAAAA,EAAAA,YAAU,WAGN,OAFAF,GAASG,EAAAA,EAAAA,OAEF,WACHH,GAASI,EAAAA,EAAAA,MACb,CACJ,GAAG,KAGC,2BACgB,UAAXR,IAAsB,4EACvB,iCACI,SAACS,EAAQ,KACT,SAACC,EAAc,SAI/B,EAEMD,EAAe,WACjB,IAAME,GAAWV,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKQ,QAAQ,IACnEC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAK,eAA/CC,EAAY,KAAEC,EAAe,KAkBpC,OANAV,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdS,IACyB,QAAzB,EAAAH,EAAkBK,eAAO,OAAzB,EAA2BC,eAAe,CAACC,SAAU,WAE7D,GAAG,CAACR,KAGA,iBAAKS,MAAO,CAACC,OAAQ,QAASC,SAAU,QAASC,SAjB/B,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cAEdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,EAExC,EAS6E,UACpEL,EAASqB,KAAI,SAACC,GAAC,OAAK,SAACC,EAAO,CAAYC,QAASF,GAAfA,EAAEG,GAAiB,KACtD,gBAAKC,IAAKzB,MAGtB,EAEMsB,GAA4CI,EAAAA,EAAAA,OAAK,YAAgB,IAAdH,EAAO,EAAPA,QAErD,OADAI,QAAQC,IAAI,eAER,4BACI,gBAAKC,IAAKN,EAAQO,MAAOtB,MAAO,CAACuB,MAAO,QAASC,IAAI,QAAO,KAAC,uBAAIT,EAAQU,YACzE,kBACCV,EAAQA,SACT,oBAGZ,IAEMzB,EAAqB,WACvB,OAA8BI,EAAAA,EAAAA,UAAS,IAAG,eAAnCqB,EAAO,KAAEW,EAAU,KAEpB9C,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,MAAM,IAE/DI,GAAWC,EAAAA,EAAAA,MAUjB,OACI,4BACI,0BACI,qBAAU0C,SAAU,SAAAvB,GAAC,OAAIsB,EAAWtB,EAAEE,cAAcsB,MAAM,EAAEA,MAAOb,OAEvE,0BACI,mBAAQc,SAAqB,UAAXjD,EAAoBkD,QAdvB,WAClBf,IAGL/B,GAAS+C,EAAAA,EAAAA,IAAYhB,IACrBW,EAAW,IACf,EAQ8E,sBAKlF,EAEA,UArGqB,WACjB,OACI,0BACI,SAAC/C,EAAI,KAGjB,C","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, {FC, memo, useEffect, useRef, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from '../../redux/chat-reducer'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred! Please refresh the page.</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 500) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: '600px', overflow: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: FC<{ message: ChatMessageType }> = memo(({message}) => {\r\n    console.log('>>>>Render')\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: '50px'}} alt='ava'/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('')\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={e => setMessage(e.currentTarget.value)} value={message}/>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n"],"names":["Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflow","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","memo","console","log","src","photo","width","alt","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}