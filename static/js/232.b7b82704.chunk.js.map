{"version":3,"file":"static/js/232.b7b82704.chunk.js","mappings":"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","sources":["webpack://my_app_net/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","webpack://my_app_net/./src/components/Users/Users.module.css?b9d0","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__ZNC4W\",\"pageNumber\":\"Paginator_pageNumber__da4Av\",\"selectedPage\":\"Paginator_selectedPage__TLdtr\"};","import React, {FC, useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n                                      totalItemsCount,\r\n                                      pageSize,\r\n                                      currentPage = 1,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10\r\n                                  }) => {\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    const pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return (\r\n                        <span className={cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber)}\r\n                              key={p}\r\n                              onClick={() => {\r\n                                  onPageChanged(p)\r\n                              }}>{p} </span>\r\n                    )\r\n                })}\r\n            {portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"Users_userPhoto__TO0v4\"};","import {FC} from 'react'\r\nimport styles from './Users.module.css'\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UserType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto} alt=''/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unfollow(user.id)\r\n                                  }}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id)\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{'user.location.country'}</div>\r\n                    <div>{'user.location.city'}</div>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import {createSelector} from 'reselect'\r\nimport {AppStateType} from './redux-store'\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(() => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\n","import React, {FC, memo} from 'react'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../redux/users-selectors'\r\n\r\nconst usersSearchFormValidate = () => {\r\n    return {}\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = memo((props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FilterType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        props.onFilterChanged(values)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: filter.friend}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type='text' name='term'/>\r\n                        <Field name='friend' as='select'>\r\n                            <option value='null'>All</option>\r\n                            <option value='true'>Only followed</option>\r\n                            <option value='false'>Only unfollowed</option>\r\n                        </Field>\r\n                        <button type='submit' disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n","import React, {FC, useEffect} from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, follow, requestUsers, unfollow} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsers, getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useLocation, useNavigate} from 'react-router-dom'\r\n\r\ntype QueryParamsType = { term?: string; friend?: string; page?: string }\r\n\r\nexport const Users: FC = () => {\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const location = useLocation()\r\n\r\n    useEffect(() => {\r\n        const search = new URLSearchParams(location.search)\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (search.get('page')) {\r\n            actualPage = Number(search.get('page'))\r\n        }\r\n\r\n        if (search.get('term')) {\r\n            actualFilter = {...actualFilter, term: search.get('term') as string}\r\n        }\r\n\r\n        if (search.get('friend')) {\r\n            actualFilter = {\r\n                ...actualFilter,\r\n                friend: search.get('friend') === 'null' ? null : search.get('friend') === 'true'\r\n            }\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (filter.term) {\r\n            query.term = filter.term\r\n        }\r\n\r\n        if (filter.friend !== null) {\r\n            query.friend = String(filter.friend)\r\n        }\r\n\r\n        if (currentPage !== 1) {\r\n            query.page = String(currentPage)\r\n        }\r\n\r\n        navigate({\r\n            pathname: '/developers',\r\n            search: new URLSearchParams(query).toString()\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const _follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const _unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize}\r\n                       currentPage={currentPage} onPageChanged={onPageChanged}/>\r\n            <div>\r\n                {\r\n                    users.map(u => <User key={u.id}\r\n                                         user={u}\r\n                                         followingInProgress={followingInProgress}\r\n                                         follow={_follow}\r\n                                         unfollow={_unfollow}/>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from 'react'\r\nimport {Users} from './Users'\r\nimport {useSelector} from 'react-redux'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nconst UsersPage: FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users/>\r\n    </>\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","onClick","filter","p","map","cn","user","followingInProgress","unfollow","follow","to","id","src","photos","small","userPhoto","alt","followed","disabled","some","name","status","getUsers","createSelector","state","usersPage","users","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","UsersSearchForm","memo","props","useSelector","enableReinitialize","initialValues","term","friend","validate","onSubmit","values","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Users","dispatch","useDispatch","navigate","useNavigate","location","useLocation","useEffect","search","URLSearchParams","actualPage","actualFilter","get","Number","requestUsers","query","String","page","pathname","toString","_follow","userId","_unfollow","pageNumber","u","pageTitle","Preloader"],"sourceRoot":""}