{"version":3,"file":"static/js/827.1d456e07.chunk.js","mappings":"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","sources":["webpack://my_app_net/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my_app_net/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://my_app_net/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessagesForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.ts","webpack://my_app_net/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__2mQU0\",\"dialogsItems\":\"Dialogs_dialogsItems__Nbfbm\",\"active\":\"Dialogs_active__S0V7C\",\"messages\":\"Dialogs_messages__wiQ4f\",\"message\":\"Dialogs_message__HBwxq\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__69QcH\",\"dialogsItems\":\"DialogItem_dialogsItems__0nWRt\",\"active\":\"DialogItem_active__UKIqD\",\"messages\":\"DialogItem_messages__JfWDH\",\"message\":\"DialogItem_message__6ONXT\"};","import React, {FC} from 'react'\r\nimport styles from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    const path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={styles.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Message_dialogs__9qDwK\",\"dialogsItems\":\"Message_dialogsItems__SGyha\",\"active\":\"Message_active__ayX67\",\"messages\":\"Message_messages__SWa5I\",\"message\":\"Message_message__RiqoI\"};","import React, {FC} from 'react'\r\nimport styles from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.message}>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import {FC} from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators'\r\nimport {NewMessageFormValuesType} from '../Dialogs'\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message',\r\n                    'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React, {FC} from 'react'\r\nimport styles from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport AddMessageForm from './AddMessageForm/AddMessagesForm'\r\nimport {InitialStateType} from '../../redux/dialogs-reducer'\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n    const state = props.dialogsPage\r\n\r\n    const dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n    const messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import React from 'react'\r\nimport {actions} from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import React, {FC} from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from 'redux-form'\r\nimport {FieldValidatorType} from '../../../utils/validators/validators'\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = (\r\n    {meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n    placeholder: string | null,\r\n    name: FormKeysType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: FC<WrappedFieldProps>,\r\n    props = {}, text = '') {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validators}\r\n                   component={component}\r\n                   {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import React, {FC} from 'react'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../redux/redux-store'\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP extends Object>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to='/login'/>\r\n        }\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__P3At6\",\"error\":\"FormsControls_error__ORnv4\",\"formSummaryError\":\"FormsControls_formSummaryError__2S3wj\"};"],"names":["props","path","id","className","styles","to","name","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","FormControl","meta","touched","error","children","hasError","input","restProps","Input","placeholder","validators","component","text","validate","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","value","maxLength","length"],"sourceRoot":""}